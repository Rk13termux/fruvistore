name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: pages-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create environment file
        run: |
          echo "VITE_SUPABASE_URL=${{ secrets.VITE_SUPABASE_URL || 'https://your-project.supabase.co' }}" > .env.local
          echo "VITE_SUPABASE_ANON_KEY=${{ secrets.VITE_SUPABASE_ANON_KEY || 'your-anon-key' }}" >> .env.local
          echo "VITE_GROQ_API_KEY=${{ secrets.VITE_GROQ_API_KEY || 'placeholder-key-for-github-pages' }}" >> .env.local
          echo "=== Variables de entorno configuradas ===" >> .env.local
          echo "Build started at: $(date)" >> .env.local

      - name: Verify environment variables
        run: |
          echo "=== Verificando variables de entorno ==="
          echo "VITE_SUPABASE_URL presente: ${{ secrets.VITE_SUPABASE_URL != '' }}"
          echo "VITE_SUPABASE_ANON_KEY presente: ${{ secrets.VITE_SUPABASE_ANON_KEY != '' }}"
          echo "VITE_GROQ_API_KEY presente: ${{ secrets.VITE_GROQ_API_KEY != '' }}"
          echo "=== Contenido del archivo .env.local ==="
          cat .env.local

      - name: Build
        run: |
          echo "=== Iniciando build ==="
          echo "Directorio actual: $(pwd)"
          echo "Archivos en directorio:"
          ls -la
          echo "=== Ejecutando script de inyección ==="
          node scripts/inject-env.js
          echo "=== Verificando inyección ==="
          grep -A5 "window.__ENV__" index.html
          echo "=== Ejecutando build ==="
          npm run build
        env:
          NODE_ENV: production
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL || 'https://your-project.supabase.co' }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY || 'your-anon-key' }}
          VITE_GROQ_API_KEY: ${{ secrets.VITE_GROQ_API_KEY || 'placeholder-key-for-github-pages' }}

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'

      # Prune duplicate 'github-pages' artifacts in this run (keep newest)
      - name: Prune duplicate Pages artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const { repo: { owner, repo }, runId } = context;
            const res = await github.rest.actions.listWorkflowRunArtifacts({ owner, repo, run_id: runId });
            const pages = res.data.artifacts.filter(a => a.name === 'github-pages');
            if (pages.length <= 1) {
              core.info(`Found ${pages.length} 'github-pages' artifact(s). No pruning needed.`);
              return;
            }
            pages.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
            const toDelete = pages.slice(1);
            core.info(`Pruning ${toDelete.length} duplicate artifact(s). Keeping id=${pages[0].id}`);
            for (const art of toDelete) {
              await github.rest.actions.deleteArtifact({ owner, repo, artifact_id: art.id });
              core.info(`Deleted artifact id=${art.id} name=${art.name}`);
            }

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
